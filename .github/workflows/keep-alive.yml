# .github/workflows/keep-alive.yml
name: Keep SMS Server Alive

on:
  schedule:
    # Runs every 12 minutes to prevent Render free tier sleep (15min timeout)
    - cron: '*/12 * * * *'
  
  # Allow manual trigger from GitHub Actions tab
  workflow_dispatch:

jobs:
  keep-alive:
    name: Ping SMS Server
    runs-on: ubuntu-latest
    
    steps:
      - name: Ping server health endpoint
        run: |
          echo "üöÄ Pinging SMS server at $(date)"
          
          # Your existing health endpoint
          SERVER_URL="https://mysmsnumber.onrender.com"
          
          # Ping your existing health endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X GET \
            -H "User-Agent: GitHub-Actions-SMS-KeepAlive/1.0" \
            -H "Accept: application/json" \
            --max-time 30 \
            "${SERVER_URL}/api/health" || echo "000")
          
          echo "üì° SMS Server response: $RESPONSE"
          
          if [ "$RESPONSE" -eq 200 ]; then
            echo "‚úÖ SMS Server is alive and healthy"
          elif [ "$RESPONSE" -eq 000 ]; then
            echo "‚ùå SMS Server unreachable (timeout/network error)"
            exit 1
          else
            echo "‚ö†Ô∏è SMS Server responded with: $RESPONSE (may be starting up)"
          fi
          
          echo "‚è∞ Keep-alive ping completed at $(date)"

  # Optional: Extra ping during peak hours
  peak-hours-ping:
    name: Peak Hours Health Check
    runs-on: ubuntu-latest
    # Only run this job during peak usage hours
    if: ${{ github.event.schedule == '*/12 * * * *' }}
    
    steps:
      - name: Check if peak hours (9 AM - 9 PM UTC)
        run: |
          HOUR=$(date -u +%H)
          echo "Current UTC hour: $HOUR"
          
          if [ $HOUR -ge 9 ] && [ $HOUR -le 21 ]; then
            echo "‚è∞ Peak hours detected - additional health check"
            echo "SHOULD_PING=true" >> $GITHUB_ENV
          else
            echo "üåô Off-peak hours - skipping additional check"
            echo "SHOULD_PING=false" >> $GITHUB_ENV
          fi
      
      - name: Peak hours health verification
        if: env.SHOULD_PING == 'true'
        run: |
          echo "üî• Performing peak hours health verification"
          
          # Check API health with more detailed logging
          HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -H "User-Agent: GitHub-PeakHours-Monitor/1.0" \
            "https://mysmsnumber.onrender.com/api/health" || echo -e "\nERROR")
          
          HTTP_CODE=$(echo "$HEALTH_RESPONSE" | tail -n1)
          HEALTH_DATA=$(echo "$HEALTH_RESPONSE" | head -n -1)
          
          echo "Peak hours check - Status: $HTTP_CODE"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Peak hours verification successful"
            echo "üìä Health data preview: $(echo "$HEALTH_DATA" | head -c 100)..."
          else
            echo "‚ö†Ô∏è Peak hours check returned: $HTTP_CODE"
          fi